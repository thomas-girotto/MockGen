<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Specs.Generated.Helpers.Matchers;

namespace MockGen.Specs.Generated.Helpers
{
    internal class FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>
    {
        internal static FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn> Default = new FuncSpecification<#=Descriptor.GenericTypes#>, TReturn>(<#=Descriptor.ConcatNewClassByParameterType("AnyArgMatcher")#>, <#=Descriptor.DiscardParameters#> => default(TResult));
<# foreach (var n in Descriptor.EnumerateNumbers) { #>
        private readonly ArgMatcher<TParam<#=n#>> matcher<#=n#>;
<# } #>

        internal FuncSpecification(<#=Descriptor.ConcatClassParameterByParameterType("ArgMatcher", "matcher")#>, Func<<#=Descriptor.GenericTypes#>, TReturn> action)
        {
<# foreach (var n in Descriptor.EnumerateNumbers) { #>
            this.matcher<#=n#> = matcher<#=n#>;
<# } #>
            Action = action;
        }

        internal bool Match(<#=Descriptor.ParametersTypesWithName#>)
        {
            return <#=Descriptor.ConcatMatcherCalls("matcher", "param")#>
        }

        internal Func<<#=Descriptor.GenericTypes#>, TReturn> Action { get; private set; }
    }
}