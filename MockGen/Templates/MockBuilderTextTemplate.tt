<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Setup;
using <#=Descriptor.TypeToMockOriginalNamespace#>;

namespace MockGen
{
    internal class <#=Descriptor.TypeToMock#>MockBuilder
    {
        private readonly <#=Descriptor.TypeToMock#>MethodsSetup methods = new <#=Descriptor.TypeToMock#>MethodsSetup();

<# foreach (var method in Descriptor.Methods) {#>
        public <#=method.IMethodSetupWithTypedParameters#> <#=method.Name#>(<#=method.ParametersDeclarationWithArg#>)
        {
<# if (method.Parameters.Count > 0) {#>
            return methods.<#=method.Name#>Setup.ForParameter(<#=method.CallForParameterMethod#>);
<#} else { #>
            return methods.<#=method.Name#>Setup;
<#}#>
        }

<#}#>
        public <#=Descriptor.TypeToMock#> Build()
        {
            methods.SetupDone();
            return new <#=Descriptor.TypeToMock#>Mock(methods);
        }
    }
}