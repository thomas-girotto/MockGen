<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Specs.Generated.Helpers;
using <#=Descriptor.TypeToMockOriginalNamespace#>;

namespace MockGen.Specs.Generated.<#=Descriptor.GeneratedNamespace#>
{
    internal class <#=Descriptor.TypeToMock#>MockBuilder
    {
<# foreach (var method in Descriptor.Methods)
{#>
        private readonly MethodSetup<<#=Descriptor.GetTypedParameters(method)#>> <#=method.NameCamelCase#>Setup = new MethodSetup<<#=Descriptor.GetTypedParameters(method)#>>();
<#}
#>

<# foreach (var method in Descriptor.Methods)
{#>
        public IMethodSetup<<#=Descriptor.GetTypedParameters(method)#>> <#=method.Name#>(<#=method.ParametersDeclarationWithArg#>)
        {
            return <#=method.NameCamelCase#>Setup<#=method.CallForParameterMethod#>;
        }
<#}
#>

        public <#=Descriptor.TypeToMock#> Build()
        {
            return new <#=Descriptor.TypeToMock#>Mock(<#=Descriptor.MockCtorParameters#>);
        }
    }
}