<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Setup;
using <#=Descriptor.TypeToMockOriginalNamespace#>;

namespace MockGen
{
    internal class <#=Descriptor.TypeToMock#>Mock : <#=Descriptor.TypeToMock#>
    {
<# foreach (var method in Descriptor.Methods)
{#>
        private readonly <#=method.MethodSetupWithTypedParameters#> <#=method.NameCamelCase#>Setup;
<#}
#>

        public <#=Descriptor.TypeToMock#>Mock(<#=Descriptor.MockCtorArgumentListDefinition#>)
        {
<# foreach (var method in Descriptor.Methods)
{#>
            this.<#=method.NameCamelCase#>Setup = <#=method.NameCamelCase#>Setup;
<#}
#>
        }

<# foreach (var method in Descriptor.Methods)
{#>
        public <#=method.ReturnType#> <#=method.Name#>(<#=method.ParametersDeclaration#>)
        {
<# if (!method.ReturnsVoid) { #>
            return <#=method.NameCamelCase#>Setup.ExecuteSetup(<#=method.ParameterNames#>);
<# } else { #>
            <#=method.NameCamelCase#>Setup.ExecuteSetup(<#=method.ParameterNames#>);
<# } #>
        }

<#}
#>
    }
}
