<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using MockGen.Matcher;
using System;
using System.Collections.Generic;
using System.Linq;

namespace MockGen.Setup
{
    internal abstract class MethodSetup<<#=Descriptor.GenericTypes#>> : IMethodSetup<<#=Descriptor.GenericTypes#>>
    {
<# if (Descriptor.NumberOfTypes == 1) { #>
        protected List<TParam1> calls = new List<TParam1>();
<# } else { #>
        protected List<(<#=Descriptor.ParametersTypesWithName#>)> calls = new List<(<#=Descriptor.ParametersTypesWithName#>)>();
<# } #>
<# foreach (var n in Descriptor.EnumerateNumbers) { #>
        protected ArgMatcher<TParam<#=n#>> matcher<#=n#>;
<# } #>

<# if (Descriptor.NumberOfTypes == 1) { #>
        public IEnumerable<TParam1> MatchingCalls => calls.Where(param => matcher1.Match(param));
<# } else { #>
        public IEnumerable<(<#=Descriptor.ParametersTypesWithName#>)> MatchingCalls => calls.Where(args => <#=Descriptor.ConcatMatcherCalls("matcher", "args.param")#>);
<# } #>

        public int NumberOfCalls => MatchingCalls.Count();

        public abstract void Throws<TException>() where TException : Exception, new();

        public abstract void Throws<TException>(TException exception) where TException : Exception;
    }
}