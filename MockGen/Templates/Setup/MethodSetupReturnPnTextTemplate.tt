<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using MockGen.Matcher;

namespace MockGen.Setup
{
    internal class MethodSetupReturn<<#=Descriptor.GenericTypes#>, TReturn> : MethodSetup<<#=Descriptor.GenericTypes#>>, IMethodSetupReturn<<#=Descriptor.GenericTypes#>, TReturn>
    {
        private Stack<FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>> actionByMatchingCriteria = new Stack<FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>>();
        private FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn> currentlyConfiguredAction = FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>.CreateNew();

        public IMethodSetupReturn<<#=Descriptor.GenericTypes#>, TReturn> ForParameter(<#=Descriptor.ConcatClassParameterByParameterType("Arg", "param")#>)
        {
            if (!setupDone)
            {
                actionByMatchingCriteria.Push(currentlyConfiguredAction);
                currentlyConfiguredAction = FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>.CreateNew();

<# foreach (var n in Descriptor.EnumerateNumbers) { #>
                currentlyConfiguredAction.Matcher<#=n#> = ArgMatcher<TParam<#=n#>>.Create(param<#=n#>);
<# } #>
            }
            else
            {
<# foreach (var n in Descriptor.EnumerateNumbers) { #>
                matcher<#=n#> = ArgMatcher<TParam<#=n#>>.Create(param<#=n#>);
<# } #>
            }

            return this;
        }

        public IMethodSetup<<#=Descriptor.GenericTypes#>> Returns(TReturn value)
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Returns));
            currentlyConfiguredAction.MockingAction = <#=Descriptor.DiscardParameters#> => value;
            return this;
        }

        public override void Throws<TException>()
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Throws));
            currentlyConfiguredAction.MockingAction = <#=Descriptor.DiscardParameters#> => throw new TException();
        }

        public override void Throws<TException>(TException exception)
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Throws));
            currentlyConfiguredAction.MockingAction = <#=Descriptor.DiscardParameters#> => throw exception;
        }

        public override void Execute(Action<<#=Descriptor.GenericTypes#>> callback)
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Execute));
            currentlyConfiguredAction.AdditionalCallback = callback;
        }

        internal override void SetupDone()
        {
            base.SetupDone();
            actionByMatchingCriteria.Push(currentlyConfiguredAction);
            currentlyConfiguredAction = FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>.CreateNew();
        }

        public TReturn ExecuteSetup(<#=Descriptor.ParametersTypesWithName#>)
        {
            // Register call with given parameter for future assertions on calls
            calls.Add(<# if (Descriptor.NumberOfTypes > 1) {#>(<#}#><#=Descriptor.ConcatParameters("param")#><# if (Descriptor.NumberOfTypes > 1) {#>)<#}#>);
            // Execute the configured action according to given parameters
            foreach (var setupAction in actionByMatchingCriteria)
            {
                if (setupAction.Match(<#=Descriptor.ConcatParameters("param")#>))
                {
                    return setupAction.ExecuteActions(<#=Descriptor.ConcatParameters("param")#>);
                }
            }
            return default(TReturn);
        }
    }
}