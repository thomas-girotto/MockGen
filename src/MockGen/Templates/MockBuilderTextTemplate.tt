<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Setup;
<# foreach (var ns in view.Namespaces) { #> 
using <#=ns#>;
<# } #>

namespace MockGen
{
    internal class <#=view.SanitizedTypeToMock#>MockBuilder
    {
        private readonly <#=view.SanitizedTypeToMock#>MethodsSetup methods = new <#=view.SanitizedTypeToMock#>MethodsSetup();
        private readonly Func<<#=view.SanitizedTypeToMock#>Mock> ctor;

<# foreach (var ctorParameters in view.CtorsParameters) {#>
        internal <#=view.SanitizedTypeToMock#>MockBuilder(<#=ctorParameters.MockBuilderConstructorParameterDeclaration#>)
        {
            ctor = () => new <#=view.SanitizedTypeToMock#>Mock(<#=ctorParameters.MockConstructorParameterNames#>);
        }
<#}#>

<# foreach (var property in view.Mock.Properties) {#>
<# if(property.HasGetter && property.HasSetter) { #>
        public IPropertyGetSet<<#=property.Type.Name#>> <#=property.Name#> => methods.<#=property.Name#>Setup;
<# } else if (property.HasGetter) { #>
        public IPropertyGet<<#=property.Type.Name#>> <#=property.Name#> => methods.<#=property.Name#>Setup;
<# } else { #>
        public IPropertySet<<#=property.Type.Name#>> <#=property.Name#> => methods.<#=property.Name#>Setup;
<# } #>

<# } #>
<# foreach (var method in view.Methods) {#>
        public <#=method.IMethodSetupWithTypedParameters#> <#=method.Name#>(<#=method.Parameters.ParametersDeclarationWithArgAndOutParameters#>)
        {
<# if (method.Parameters.HasOutParameter) { #>
            methods.<#=method.UniqueName#>OutParameterSetup = setupOutParameter;
<# } #>
<# if (method.Parameters.HasClassicParameter) {#>
            return methods.<#=method.UniqueName#>Setup.ForParameter(<#=method.Parameters.CallForParameterMethod#>);
<#} else { #>
            return methods.<#=method.UniqueName#>Setup;
<#}#>
        }

<#}#>
<# foreach (var method in view.Methods.Where(m => m.Parameters.HasOutParameter).GroupBy(m => m.Name).Select(methods => methods.First())) {#>
        public <#=method.IMethodSetupWithTypedParameters#> <#=method.Name#>(<#=method.Parameters.ParametersDeclarationWithArg#>)
        {
            return <#=method.Name#>(<#=method.Parameters.Names#>, (<#=method.Parameters.Discard#>) => default(<#=method.Parameters.OutParameterTypesDefault#>));
        }

<# } #>
        public <#=view.Mock.TypeToMockOriginalName#> Build()
        {
            methods.SetupDone();
            return ctor();
        }
    }
}