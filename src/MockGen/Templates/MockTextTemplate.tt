<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Setup;
using <#=Descriptor.TypeToMockNamespace#>;

namespace MockGen
{
    internal class <#=Descriptor.TypeToMock#>Mock : <#=Descriptor.TypeToMock#>
    {
        private readonly <#=Descriptor.TypeToMock#>MethodsSetup methods;

<# foreach (var ctor in Descriptor.Ctors) { #>
        public <#=Descriptor.TypeToMock#>Mock(<#=ctor.ConcatParametersDeclarationWith(Descriptor.TypeToMock + "MethodsSetup methods")#>)<#=string.Format(Descriptor.CallBaseCtorIfNeeded, ctor.ParameterNames)#>
        {
            this.methods = methods;
        }
<# } #>

<# foreach (var property in Descriptor.Properties) { #>
<# if(property.HasGetter && property.HasSetter) { #>
        public <#=property.Type#> <#=property.Name#>
        {
            get => methods.<#=property.Name#>Setup.ExecuteGetSetup();
            set => methods.<#=property.Name#>Setup.ExecuteSetSetup(value);
        }
<# } else if (property.HasGetter) { #>
        public <#=property.Type#> <#=property.Name#> => methods.<#=property.Name#>Setup.ExecuteGetSetup();
<# } else { #>
        public <#=property.Type#> <#=property.Name#>
        {
            set => methods.<#=property.Name#>Setup.ExecuteSetSetup(value);
        }
<# } #>

<# } #>
<# foreach (var method in Descriptor.Methods) { #>
        public <#=method.AddOverrideKeywordIfNeeded#><#=method.ReturnType#> <#=method.Name#>(<#=method.ParametersDeclaration#>)
        {
<# if (!method.ReturnsVoid) { #>
            return methods.<#=method.Name#>Setup.ExecuteSetup(<#=method.ParameterNames#>);
<# } else { #>
            methods.<#=method.Name#>Setup.ExecuteSetup(<#=method.ParameterNames#>);
<# } #>
        }

<# } #>
    }
}
