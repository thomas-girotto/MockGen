<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Setup;
<# foreach (var ns in Descriptor.Namespaces) { #> 
using <#=ns#>;
<# } #>

namespace MockGen
{
    internal class <#=Descriptor.TypeToMock.Name#>Mock : <#=Descriptor.TypeToMockOriginalName#>
    {
        private readonly <#=Descriptor.TypeToMock.Name#>MethodsSetup methods;

<# foreach (var ctor in Descriptor.Ctors) { #>
        public <#=Descriptor.TypeToMock.Name#>Mock(<#=ctor.ConcatParametersDeclarationWith(Descriptor.TypeToMock.Name + "MethodsSetup methods")#>)<#=string.Format(Descriptor.CallBaseCtorIfNeeded, ctor.ParameterNames)#>
        {
            this.methods = methods;
        }
<# } #>

<# foreach (var property in Descriptor.Properties) { #>
<# if(property.HasGetter && property.HasSetter) { #>
        public <#=property.Type.Name#> <#=property.Name#>
        {
            get => methods.<#=property.Name#>Setup.ExecuteGetSetup();
            set => methods.<#=property.Name#>Setup.ExecuteSetSetup(value);
        }
<# } else if (property.HasGetter) { #>
        public <#=property.Type.Name#> <#=property.Name#> => methods.<#=property.Name#>Setup.ExecuteGetSetup();
<# } else { #>
        public <#=property.Type.Name#> <#=property.Name#>
        {
            set => methods.<#=property.Name#>Setup.ExecuteSetSetup(value);
        }
<# } #>

<# } #>
<# foreach (var method in Descriptor.Methods) { #>
<# if (method.ReturnType.IsTask) { #>
        public <#=method.AddOverrideKeywordIfNeeded#>Task<<#=method.ReturnType.Name#>> <#=method.Name#>(<#=method.ParametersDeclarationWithOutParameters#>)
<# } else { #>
        public <#=method.AddOverrideKeywordIfNeeded#><#=method.ReturnType.Name#> <#=method.Name#>(<#=method.ParametersDeclarationWithOutParameters#>)
<# } #>        
        {
<# if (method.OutParameters.Any()) { #>
            <#=method.OutParameterNames#> = methods.<#=method.UniqueName#>OutParameterSetup(<#=method.ParameterNamesWithoutOutParameters#>); 
<# } #>
<# if (!method.ReturnsVoid) { #>
            return methods.<#=method.UniqueName#>Setup.ExecuteSetup(<#=method.ParameterNamesWithoutOutParameters#>);
<# } else { #>
            methods.<#=method.UniqueName#>Setup.ExecuteSetup(<#=method.ParameterNamesWithoutOutParameters#>);
<# } #>
        }

<# } #>
    }
}
