<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using MockGen.Matcher;

namespace MockGen.Setup
{
    internal class FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>
    {
        internal static FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn> CreateNew()
        {
            return new FuncSpecification<<#=Descriptor.GenericTypes#>, TReturn>();
        }

        private FuncSpecification() { }

<# foreach (var n in Descriptor.EnumerateNumbers) { #>
        internal ArgMatcher<TParam<#=n#>> Matcher<#=n#> { get; set; } = new AnyArgMatcher<TParam<#=n#>>();
<# } #>
        
        internal Func<<#=Descriptor.GenericTypes#>, TReturn> MockingAction { get; set; } = <#=Descriptor.DiscardParameters#> => default(TReturn);
        internal Action<<#=Descriptor.GenericTypes#>> AdditionalCallback { get; set; } = <#=Descriptor.DiscardParameters#> => { };

        internal bool Match(<#=Descriptor.ParametersTypesWithName#>)
        {
            return <#=Descriptor.ConcatMatcherCalls("Matcher", "param")#>;
        }

        internal TReturn ExecuteActions(<#=Descriptor.ParametersTypesWithName#>)
        {
            AdditionalCallback(<#=Descriptor.ConcatParameters("param")#>);
            return MockingAction(<#=Descriptor.ConcatParameters("param")#>);
        }
    }
}