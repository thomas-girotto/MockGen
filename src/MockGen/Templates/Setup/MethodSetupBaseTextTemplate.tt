<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace MockGen.Setup
{
    internal abstract class MethodSetupBase
    {
        public bool IsSetupDone { get; set; }
        protected ActionConfigurationBase currentConfiguration = new ActionConfigurationBase();

        internal virtual void SetupDone() => IsSetupDone = true;

        protected void ClearCurrentConfiguration()
        {
            currentConfiguration = new ActionConfigurationBase();
        }

        public void Throws<TException>() where TException : Exception, new()
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Throws));
            currentConfiguration.ThrowAction = () => throw new TException();
        }

        public void Throws<TException>(TException exception) where TException : Exception
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Throws));
            currentConfiguration.ThrowAction = () => throw exception;
        }

        protected void EnsureConfigurationMethodsAreAllowed(string methodName)
        {
            if (IsSetupDone)
            {
                throw new InvalidOperationException($"{methodName} method is not allowed once the mock has been built");
            }
        }

        protected void EnsureSpyingMethodsAreAllowed(string methodName)
        {
            if (!IsSetupDone)
            {
                throw new InvalidOperationException($"{methodName} method is not allowed until the mock has been built");
            }
        }
    }
}
