<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using MockGen.Matcher;
using System;
using System.Collections.Generic;
using System.Linq;

namespace MockGen.Setup
{
    internal abstract class MethodSetup<#=Descriptor.GenericTypes#> : MethodSetupBase, IMethodSetup<#=Descriptor.GenericTypes#>
    {
<# if (Descriptor.NumberOfTypes == 0) { #>
        protected int numberOfCalls;
<# } else if (Descriptor.NumberOfTypes == 1) { #>
        protected List<TParam1> calls = new List<TParam1>();
<# } else { #>
        protected List<(<#=Descriptor.ParametersTypesWithName#>)> calls = new List<(<#=Descriptor.ParametersTypesWithName#>)>();
<# } #>        
        protected new ActionConfiguration<#=Descriptor.GenericTypes#> currentConfiguration;

<# if (Descriptor.NumberOfTypes == 0) { #>
        internal MethodSetup()
        {
            currentConfiguration = new ActionConfiguration(base.currentConfiguration);
        }
<# } #>

<# if (Descriptor.NumberOfTypes > 0) { #>
        protected void ForParameter(<#=Descriptor.ConcatClassParameterByParameterType("Arg", "param")#>)
        {
            ClearCurrentConfiguration();
            currentConfiguration = new ActionConfiguration<#=Descriptor.GenericTypes#>(base.currentConfiguration);
<# foreach (var n in Descriptor.EnumerateNumbers) { #>
            currentConfiguration.Matcher<#=n#> = ArgMatcher<TParam<#=n#>>.Create(param<#=n#>);
<# } #>            
        }

<# } #>
        public int NumberOfCalls 
        { 
            get 
            {
                EnsureSpyingMethodsAreAllowed(nameof(NumberOfCalls));
<# if (Descriptor.NumberOfTypes == 0) { #>
                return numberOfCalls;
<# } else { #>
                return MatchingCalls.Count();
<# } #>
            }
        } 

<# if (Descriptor.NumberOfTypes > 0) { #>
<# if (Descriptor.NumberOfTypes == 1) { #>
        public IEnumerable<#=Descriptor.GenericTypes#> MatchingCalls
<# } else { #>
        public IEnumerable<(<#=Descriptor.ParametersTypesWithName#>)> MatchingCalls
<# } #>
        {
            get
            {
                EnsureSpyingMethodsAreAllowed(nameof(MatchingCalls));
<# if (Descriptor.NumberOfTypes == 1) { #>
                return calls.Where(@params => currentConfiguration.Match(@params));
<# } else { #>
                return calls.Where(@params => currentConfiguration.Match(<#=Descriptor.ConcatParameters("@params.param")#>));
<# } #>
            }
        }

<# } #>
        public void Execute(Action<#=Descriptor.GenericTypes#> callback)
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Execute));
            currentConfiguration.ExecuteAction = callback;
        }
    }
}
