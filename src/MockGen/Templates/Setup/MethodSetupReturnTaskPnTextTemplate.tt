<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MockGen.Setup
{
    internal class MethodSetupReturnTask<#=Descriptor.GenericTypesWithTReturn#> : 
        MethodSetup<#=Descriptor.GenericTypes#>, 
        IMethodSetupReturn<#=Descriptor.GenericTypesWithTReturn#>,
        IReturnContinuation<#=Descriptor.GenericTypes#>
    {
        private new ActionConfigurationWithReturn<#=Descriptor.GenericTypesWithTaskOfTReturn#> currentConfiguration;
<# if (Descriptor.NumberOfTypes > 0) { #>
        private Stack<ActionConfigurationWithReturn<#=Descriptor.GenericTypesWithTaskOfTReturn#>> configuredActions = new Stack<ActionConfigurationWithReturn<#=Descriptor.GenericTypesWithTaskOfTReturn#>>();
<# } #>

<# if (Descriptor.NumberOfTypes == 0) { #>
        internal MethodSetupReturnTask()
        {
            currentConfiguration = new ActionConfigurationWithReturn<Task<TReturn>>(base.currentConfiguration);
        }
<# } #>

<# if (Descriptor.NumberOfTypes > 0) { #>
        public new IMethodSetupReturn<#=Descriptor.GenericTypesWithTReturn#> ForParameter(<#=Descriptor.ConcatClassParameterByParameterType("Arg", "param")#>)
        {
            base.ForParameter(<#=Descriptor.ConcatParameters("param")#>);
            if (!IsSetupDone)
            {
                currentConfiguration = new ActionConfigurationWithReturn<#=Descriptor.GenericTypesWithTaskOfTReturn#>(base.currentConfiguration);
                configuredActions.Push(currentConfiguration);
            }
            
            return this;
        }
<# } #>

        public IReturnContinuation<#=Descriptor.GenericTypes#> Returns(TReturn value)
        {
            EnsureConfigurationMethodsAreAllowed(nameof(Returns));
            currentConfiguration.ReturnAction = () => Task.FromResult(value);
            return this;
        }

        public void AndExecute(Action<#=Descriptor.GenericTypes#> callback)
        {
            Execute(callback);
        }

        public Task<TReturn> ExecuteSetup(<#=Descriptor.ParametersTypesWithName#>)
        {
<# if (Descriptor.NumberOfTypes > 0) { #>
            // Register call with given parameter for future assertions on calls
            calls.Add(<# if (Descriptor.NumberOfTypes > 1) {#>(<#}#><#=Descriptor.ConcatParameters("param")#><# if (Descriptor.NumberOfTypes > 1) {#>)<#}#>);
            // Execute the configured action according to given parameters
            foreach (var setup in configuredActions)
            {
                if (setup.Match(<#=Descriptor.ConcatParameters("param")#>))
                {
                    return setup.RunActions(<#=Descriptor.ConcatParameters("param")#>);
                }
            }
            // If we didn't find any action configured for the given parameters, execute the default one.
            return Task.FromResult(default(TReturn));
<# } else { #>
            numberOfCalls++;
            return currentConfiguration.RunActions();
<# } #>
        }
    }
}
