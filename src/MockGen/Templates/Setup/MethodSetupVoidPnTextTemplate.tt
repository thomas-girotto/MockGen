<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Collections.Generic;

namespace MockGen.Setup
{
    internal class MethodSetupVoid<#=Descriptor.GenericTypes#> : MethodSetup<#=Descriptor.GenericTypes#>
    {
<# if (Descriptor.NumberOfTypes > 0) { #>
        private Stack<ActionConfiguration<#=Descriptor.GenericTypes#>> configuredActions = new Stack<ActionConfiguration<#=Descriptor.GenericTypes#>>();
     
        public new IMethodSetup<#=Descriptor.GenericTypes#> ForParameter(<#=Descriptor.ConcatClassParameterByParameterType("Arg", "param")#>)
        {
            base.ForParameter(<#=Descriptor.ConcatParameters("param")#>);
            if (!IsSetupDone)
            {
                configuredActions.Push(currentConfiguration);
            }

            return this;
        }

<# } #>
        public void ExecuteSetup(<#=Descriptor.ParametersTypesWithName#>)
        {
<# if (Descriptor.NumberOfTypes > 0) { #>
            // Register call with given parameter for future assertions on calls
            calls.Add(<# if (Descriptor.NumberOfTypes > 1) {#>(<#}#><#=Descriptor.ConcatParameters("param")#><# if (Descriptor.NumberOfTypes > 1) {#>)<#}#>);
            // Execute the configured action according to given parameters
            foreach (var setup in configuredActions)
            {
                if (setup.Match(<#=Descriptor.ConcatParameters("param")#>))
                {
                    setup.RunActions(<#=Descriptor.ConcatParameters("param")#>);
                    return;
                }
            }
<# } else { #>
            numberOfCalls++;
            currentConfiguration.RunActions();
<# } #>
        }
    }
}
